pipeline script
----------------

Install the following plugins

   ==> Pipeline stage view:- To view the build stages clearly
   
   ==> Deploy to container:- To deploy the artifacts into Containers
   
   ==> S3 publisher :- To Store the Artifacts into S3 bucket
   
   ==> nexus artifact uploader:- To store the artifacts into the Artifactory Repository (Nexus)
   
   ==> SonarQube Scanner :- To Scan the code
   
   ==> Sonar Quality Gate:- To check the quality of the Code
   
   ==> Maven Integration:- To build the code through the Maven goals
   
   
   

SETUP TOMCAT CREDS IN JENKINS
---------------------------------------

Tomcat Credentials in Jenkins
-------------------------------

Plugin required:- Deploy to container ==> To deploy the artifacts into Containers


Jenkins ---->  Manage Jenkins ---->  Security ---->  Credentials ---->  Click on 'global' ----> 

Add credentials ---->  Kind: Username with Password, Scope: Global,

 username: admin, Password: admin, ID: tomcat-creds, Description: tomcat-creds  ----> Create
 
 
 
Create a pipeline job

Repo URL:  (HOTSTAR App)


Tomcat PIPELINE SCRIPT:-
---------------------------

For the stage 'Deploy to Tomcat', generate the pipeline syntax;

Open Pipeline Syntax in new tab ----> Sample step: deploy: Deploy war/ear to a container, WAR/EAR Files: **/*.war,

 Context Path: hotstarapp, Add container: Select 'Tomcat 9.x Remote', Credentials: Select the tomcat creds.

  Tomcat URL: Paste up to 8080/ ----> Generate pipeline script ----> Copy and paste in 'Deploy to Tomcat' stage
  
Paste the script.






LET'S PUSH THE ARTIFACT TO S3 BUCKET:-
---------------------------------------------


To do this, we need to generate access and secret keys and we also need to create s3 bucket

IAM ----> Create IAM User with Administrator Access ----> Open user ----> 'Security Credentials' tab

 ----> Create access key ----> Use case: AWS CLI,  ----> Next ----> Create access key
 
 
 
AWS S3 bucket Credentials in Jenkins
-------------------------------------------

Plugin required:-  S3 publisher ==> To Store the Artifacts into S3 bucket


Let's configure access keys in Jenkins ----> Manage Jenkins ----> System Configuration ----> System
  
 ----> Scroll down to "Amazon S3 Profiles" ----> Add ----> Profile name: s3creds, Access key: <PasteAccessKey>, 
 
 Secret key: <PasteSecretKey> ----> Apply ---->  Save  
 
 

 
AWS S3 bucket PIPELINE SCRIPT:-
----------------------------------

Open the job created ----> Open pipeline syntax (here we will generate a script to push artifacts to S3)

  ----> Sample step: S3upload: Publish artifacts to S3 bucket, S3 profile: s3creds, Files to upload: **/*.war, 
  
  Destination Bucket: <GiveTheBucketName>/, Storage class: Standard, Bucket region: <SelectTheRegionofBucket>,
  
  'check' Server side encryption ----> Generate pipeline script ----> Copy and paste in 'Artifacts to S3' stage
  
  
  
  
  

WORKING WITH SONARQUBE
-----------------------------

  
Go to SonarQube ----> Projects ----> Add project ----> Manually ----> Project key: hotstar, Display name: hotstar 

 ----> Setup ----> Generate a token: hotstar ----> Generate ----> Copy the token ----> Lets configure the SonarQube credentials in Jenkins



SonarQube Credentials in Jenkins
--------------------------------------

Plugins required:- SonarQube Scanner ==> To scan the code
   
                    Sonar Quality Gate ==> To check the quality of the code
					

Jenkins ----> Manage Jenkins ----> Security ----> Credentials ----> Click on 'global' ----> Add creds 

 ----> Kind: Secret text, Scope: Global, Secret: Paste the secret copied from SonarQube, ID: sonar-creds, 
 
  Description: sonar-creds ----> Create
  
  

Jenkins ----> Manage Jenkins ----> System Configuration ----> System ----> Scroll down to 'SonarQube servers'

  ----> 'Check' environment variables, Add SonarQube ----> Name: sonarqube, Server URL: <SonarQube URL> [only upto 9000]

  ----> Server authentication token: Select 'sonar-creds' from dropdown ----> Apply ----> Save
  
  

Jenkins ----> Manage Jenkins ----> System Configuration ----> Tools ----> Scroll down to 'sonarqube Scanner Installations' 

 ----> Add SonarQube scanner ----> Name: sonarscanner, 'Check' Install automatically, Version: 7.1.0.4889 
 
 ----> Apply ----> Save
  
   

Lets integrate SonarQube in the pipeline ----> Open the job ----> Paste the below script (In the script, I have added sonarqube-scanning stage before the artifacts stage)







NEXUS CONFIGURATION:-
--------------------------

Go to the Nexus tab in the browser ----> Sign in ----> Username: admin, To get the password, copy the path seen in the Nexus browser 
 
 ----> Goto the nexus connected tab in Moba ----> cat <Paste The Path> ----> Copy the password. ----> Paste the 
 
 password in nexus browser ----> Signin ----> Set the new password ----> Enable anonymous access ----> Signin
 
 

Click on settings icon ----> Click on 'repositories' ----> Create repo ----> Scroll down and Click on 'maven2 hosted'

 ----> Name: hotstar, Version policy: Snapshot, Layout policy: Strict, Content disposition: Inline, Blob store:
 
 default, Deployment policy: Allow redeploy ----> Create repository ----> You will see 'hotstar' repo 
 
 ----> Let's configure the Nexus credentials in Jenkins
 
 
  
Nexus Credentials in Jenkins
------------------------------

Plugin Required:- nexus artifact uploader ==> To store the artifacts into the Artifactory Repository (Nexus)


Jenkins ----> Manage Jenkins ----> Security ----> Credentials ----> Click on 'global' ----> Add creds

 ----> Kind: Username with Password, Scope: Global, Username: admin, Password: <Enter The Nexus>,
 
 ID: nexus-creds, Description: nexus-creds ----> Create
 
 
 
Nexus PIPELINE SCRIPT:-
----------------------

Let's integrate Nexus in the pipeline ----> Open the job ----> Open pipeline syntax in a new tab 

----> Sample step: nexusArtifactUploader: Nexus Artifact Uploader, Nexus Version: Nexus3, Protocol: HTTP,

 Nexus URL: <Paste The Nexus URL> [Ex: IP:8081], Credentials: Select 'nexus' from dropdown, GroupId: in.kastro 
 
 (this is in pom.xml file), Version: 8.3.3-Snapshot (this is in the pom.xml file), Repository: hotstar 
 
 (This name should be the same as created in the Nexus console), Artifacts: Add: Artifact ID: myapp (this is in pom.xml file),
 
 Type: .war, Classifier: <Leave Blank>, File: target/myapp.war (Note: here instead of path, we can also mention **/*.war)
 
 ----> Generate script ----> Copy the script and paste it in the below pipeline stage of 'Nexus'
 
 
Paste the below script (In the script, I have added 'Nexus' stage after the Tomcat stage) 




Master and Slave Nodes:-
----------------------------

The master node is nothing but a VM that performs the builds in the Jenkins pipeline and
 Slave node is nothing but a VM that is used to store the job's results in it 
 

Master node  requires Tomcat, maven, git, Java-17, Jenkins, nexus,sonarqube....
 Slave node requires only git, Java 17, Maven
 

We use the SSH Protocol to connect the Master node with the Slave node(s) in Jenkins.


 
 
Let's configure the Slave Nodes in Jthe enkins dashboard
-------------------------------------------------------


Adding Slave 1 to the Jenkins dashboard
---------------------------------------

Jenkins dashboard ----> Build executor status (left pane bottom) ----> Currently, you will see "Built-in node" 
 
 which means it is a MASTER node ----> Click on "New Node" ----> Node name: slave1, Type: Permanent Agent 
 
 ----> Create ----> Name: slave1 ----> Description: This is Slave 1 ----> No. of executors: 3 (this is to run 
 
  number of builds in parallel) ----> Remote root directory: /tmp (In this path of slave nodes, the builds will 
  
  be stored) ----> Labels: slave1 (This label name is very important because this label name is the same name we

  should be configured in the pipeline script. Based on this only, the job will get executed on whichever worker node

  We want) ----> Usage: Only build jobs with label expressions matching this node ----> Launch method: Launch 
  
  agents via SSH ----> Host: <PrivateIPofSlave1> ----> Credentials: Add: Jenkins ----> Scope: Global, Kind: SSH 
  
  username with private key, Scope: Global, ID: <Leave Blank> , Description: <Leave Blank>, Username: ec2-user,

  Private key: Enter directly: Paste the entire content from the pem file, which is used to launch worker node 1 
  
  ----> Save ----> From the dropdown, select "ec2-user" ----> Host key verification strategy: Non verifying 
  
  verification strategy ----> Availability: Keep this agent online as much as possible ----> Save ----> 
  
  You can see Slave1 got added. Just refresh, you will see the values under free disk space, free temp space, and

  Other options are available.
  
This is the configuration of the master and slave.


  



pipeline {
    agent {
	   label 'slave1'          #( if you want to save the workspace in slave node, if not give agent any ) 
	}   
    
    stages {
        stage('Git checkout')
            steps {
                git 'github- URL'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Maven Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('sonarqube scanner') {
            steps {
                withSonarQubeEnv('sonarqube') {     (here sonarqube name must be same as manage jenkins ---> system --> sonarqube servers name)
                    sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:5.0.0.4389:sonar'
				}	 # ( here 5.0.0.4389 is taken from Maven repository --> sonar-maven plugin --> take version ) 
            }         # ( Change the version in pom.xml also ---> sonar-maven-plugin )
        }
        stage('Maven Package') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Store in Nexus-Artifactory') {
            steps {
              <Paste the script>  
            }
        }
        stage('Store in S3 bucket') {
            steps {
                <Paste the script>
            }
        }
        stage('Deploy Stage') {
            steps {
                pipeline script
            }
        }    
    }
}
